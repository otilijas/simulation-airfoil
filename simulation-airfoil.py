"""Prediction of the scaled sound pressure level generated by a turbulent flow using 3 models.

NASA dataset obtained from a series of aerodynamic and acoustic tests of two and
three-dimensional airfoil blade sections conducted in an anechoic wind tunnel.
The data was obtained from UCI Machine Learning Repository:
https://archive.ics.uci.edu/ml/datasets/airfoil+self-noise"""

import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.neural_network import MLPRegressor


ASNNames = ['Frequency', 'AngleAttack', 'ChordLength', 'FSVelocity', 'SSDT', 'SSPL']

ASNData = pd.read_csv('airfoil-self-noise.dat', delim_whitespace=True, names=ASNNames)

print(ASNData.head(20))

print(ASNData.info())

BasicStats = ASNData.describe()
BasicStats = BasicStats.transpose()
print(BasicStats)


# Feature scaling using SKLearn

ScalerObject = MinMaxScaler()
print(ScalerObject.fit(ASNData))
ASNDataScaled = ScalerObject.fit_transform(ASNData)
ASNDataScaled = pd.DataFrame(ASNDataScaled, columns=ASNNames)

summary = ASNDataScaled.describe()
summary = summary.transpose()
print(summary)


# Viewing the data using matplotlib

boxplot = ASNDataScaled.boxplot(column=ASNNames)
plt.show()

CorrASNData = ASNDataScaled.corr(method='pearson')
with pd.option_context('display.max_rows', None, 'display.max_columns', CorrASNData.shape[1]):
    print(CorrASNData)

plt.matshow(CorrASNData)
plt.xticks(range(len(CorrASNData.columns)), CorrASNData.columns)
plt.yticks(range(len(CorrASNData.columns)), CorrASNData.columns)
plt.colorbar()
plt.show()


# Splitting the data

X = ASNDataScaled.drop('SSPL', axis=1)
print('X shape = ', X.shape)
Y = ASNDataScaled['SSPL']
print('Y shape = ', Y.shape)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=5)
print('X train shape = ', X_train.shape)
print('X test shape = ', X_test.shape)
print('Y train shape = ', Y_train.shape)
print('Y test shape = ', Y_test.shape)


# Linear Regression

LRModel = LinearRegression()
LRModel.fit(X_train, Y_train)

Y_predLR = LRModel.predict(X_test)

# Model evaluation.
MseLR = mean_squared_error(Y_test, Y_predLR)
print('Linear Regression Model')
print(MseLR)


# MLP Regressor Model

MLPRegModel = MLPRegressor(hidden_layer_sizes=(50), activation='relu', solver='lbfgs',
                           tol=1e-4, max_iter=10000, random_state=1)

MLPRegModel.fit(X_train, Y_train)

Y_predMLPReg = MLPRegModel.predict(X_test)

# Model evaluation.
MseMLP = mean_squared_error(Y_test, Y_predMLPReg)
print('SKLearn Neural Network Model')
print(MseMLP)


# Keras Model

model = Sequential()
model.add(Dense(20, input_dim=5, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(1, activation='linear'))
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])
model.fit(X_train, Y_train, epochs=2000, verbose=1)

model.summary()

Y_predKM = model.predict(X_test)

# Model evaluation.
score = model.evaluate(X_test, Y_test, verbose=0)
print('Keras Model')
print(score[0])


# Plot a comparison diagram

plt.figure(1)

plt.subplot(221)
plt.scatter(Y_test, Y_predMLPReg)
plt.plot((0, 1), "r--")
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("SKLearn Neural Network Model")

plt.subplot(222)
plt.scatter(Y_test, Y_predKM)
plt.plot((0, 1), "r--")
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Keras Sequential Model")
plt.show()

plt.subplot(223)
plt.scatter(Y_test, Y_predLR)
plt.plot((0, 1), "r--")
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("SKLearn Linear Regression Model")
plt.show()
